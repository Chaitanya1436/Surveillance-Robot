#include <DHT.h>
#include <NewPing.h>

// Pins for the ultrasonic sensors (for detecting obstacles)
#define TRIGGER_PIN_FRONT 2
#define ECHO_PIN_FRONT 3
#define TRIGGER_PIN_BACK 4
#define ECHO_PIN_BACK 5
#define TRIGGER_PIN_LEFT 6
#define ECHO_PIN_LEFT 7
#define TRIGGER_PIN_RIGHT 8
#define ECHO_PIN_RIGHT 9

// Pins for temperature and gas sensors
#define DHTPIN 10
#define DHTTYPE DHT11
#define GAS_SENSOR_PIN A0

// Pins for the motors
#define MOTOR_LEFT 11
#define MOTOR_RIGHT 12

// Create objects for the sensors
DHT dht(DHTPIN, DHTTYPE);
NewPing sonarFront(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT, 200);
NewPing sonarBack(TRIGGER_PIN_BACK, ECHO_PIN_BACK, 200);
NewPing sonarLeft(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, 200);
NewPing sonarRight(TRIGGER_PIN_RIGHT, ECHO_PIN_RIGHT, 200);

void setup() {
  Serial.begin(9600);
  dht.begin();
  Serial1.begin(115200); // For talking to the ESP32/ESP8266
}

void loop() {
  // Get distances from the ultrasonic sensors
  int distanceFront = sonarFront.ping_cm();
  int distanceBack = sonarBack.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();
  int distanceRight = sonarRight.ping_cm();
  float temperature = dht.readTemperature();
  int gasLevel = analogRead(GAS_SENSOR_PIN);

  // Control the robot's movement based on distances
  if (distanceFront < 10) {
    // If there's something close in front, go backward
    analogWrite(MOTOR_LEFT, 255);
    analogWrite(MOTOR_RIGHT, 255);
  } else if (distanceLeft < 10) {
    // If something's close on the left, turn right
    analogWrite(MOTOR_LEFT, 255);
    analogWrite(MOTOR_RIGHT, 0);
  } else if (distanceRight < 10) {
    // If something's close on the right, turn left
    analogWrite(MOTOR_LEFT, 0);
    analogWrite(MOTOR_RIGHT, 255);
  } else {
    // Otherwise, go forward
    analogWrite(MOTOR_LEFT, 255);
    analogWrite(MOTOR_RIGHT, 255);
  }

  // Check for high temperature or gas
  if (temperature > 50) {
    // If it's too hot, send a fire alert
    sendEmergencyNotification("fire_detected", "Emergency, fire detected");
  }
  if (gasLevel > 400) {
    // If there's too much gas, send a gas alert
    sendEmergencyNotification("gas_detected", "Gas detected");
  }

  delay(1000);
}

// Function to send emergency alerts
void sendEmergencyNotification(const char* eventName, const char* message) {
  Serial.print("Sending notification: ");
  Serial.println(message);

  // Send a message to the ESP32/ESP8266 to notify about the emergency
  Serial1.print("AT+HTTPPARA=\"URL\",\"http://maker.ifttt.com/trigger/");
  Serial1.print(eventName);
  Serial1.print("/with/key/YOUR_IFTTT_KEY?value1=");
  Serial1.print(message);
  Serial1.println("\"");
  Serial1.println("AT+HTTPACTION=0"); // Send the HTTP request
  delay(5000); // Wait a bit for the message to send
}
